// src/ai-chat-v5-migration.ts
var STATE_MAP = {
  "partial-call": "input-streaming",
  call: "input-available",
  result: "output-available",
  error: "output-error"
};
function isUIMessage(message) {
  return typeof message === "object" && message !== null && "parts" in message && Array.isArray(message.parts);
}
function isLegacyMessage(message) {
  return typeof message === "object" && message !== null && "role" in message && "content" in message && typeof message.role === "string" && typeof message.content === "string";
}
function isCorruptArrayMessage(message) {
  return typeof message === "object" && message !== null && "role" in message && "content" in message && typeof message.role === "string" && Array.isArray(message.content) && !("parts" in message);
}
function autoTransformMessage(message, index = 0) {
  if (isUIMessage(message)) {
    return message;
  }
  const parts = [];
  if (message.reasoning) {
    parts.push({
      type: "reasoning",
      text: message.reasoning
    });
  }
  if (message.toolInvocations && Array.isArray(message.toolInvocations)) {
    message.toolInvocations.forEach((inv) => {
      if (typeof inv === "object" && inv !== null && "toolName" in inv) {
        const invObj = inv;
        parts.push({
          type: `tool-${invObj.toolName}`,
          toolCallId: invObj.toolCallId,
          state: STATE_MAP[invObj.state] || "input-available",
          input: invObj.args,
          output: invObj.result !== void 0 ? invObj.result : null
        });
      }
    });
  }
  if (message.parts && Array.isArray(message.parts)) {
    message.parts.forEach((part) => {
      if (typeof part === "object" && part !== null && "type" in part) {
        const partObj = part;
        if (partObj.type === "file") {
          parts.push({
            type: "file",
            url: partObj.url || (partObj.data ? `data:${partObj.mimeType || partObj.mediaType};base64,${partObj.data}` : void 0),
            mediaType: partObj.mediaType || partObj.mimeType,
            filename: partObj.filename
          });
        }
      }
    });
  }
  if (Array.isArray(message.content)) {
    message.content.forEach((item) => {
      if (typeof item === "object" && item !== null && "text" in item) {
        const itemObj = item;
        parts.push({
          type: itemObj.type || "text",
          text: itemObj.text || ""
        });
      }
    });
  }
  if (!parts.length && message.content !== void 0) {
    parts.push({
      type: "text",
      text: typeof message.content === "string" ? message.content : JSON.stringify(message.content)
    });
  }
  if (!parts.length) {
    parts.push({
      type: "text",
      text: typeof message === "string" ? message : JSON.stringify(message)
    });
  }
  return {
    id: message.id || `msg-${index}`,
    role: message.role === "data" ? "system" : message.role || "user",
    parts
  };
}
function migrateToUIMessage(message) {
  return autoTransformMessage(message);
}
function autoTransformMessages(messages) {
  return messages.map((msg, i) => autoTransformMessage(msg, i));
}
function migrateMessagesToUIFormat(messages) {
  return autoTransformMessages(messages);
}
function needsMigration(messages) {
  return messages.some((message) => {
    if (isUIMessage(message)) {
      return false;
    }
    if (isCorruptArrayMessage(message)) {
      return true;
    }
    if (isLegacyMessage(message)) {
      return true;
    }
    return true;
  });
}
function analyzeCorruption(messages) {
  const stats = {
    total: messages.length,
    clean: 0,
    legacyString: 0,
    corruptArray: 0,
    unknown: 0,
    examples: {}
  };
  for (const message of messages) {
    if (isUIMessage(message)) {
      stats.clean++;
    } else if (isCorruptArrayMessage(message)) {
      stats.corruptArray++;
      if (!stats.examples.corruptArray) {
        stats.examples.corruptArray = message;
      }
    } else if (isLegacyMessage(message)) {
      stats.legacyString++;
      if (!stats.examples.legacyString) {
        stats.examples.legacyString = message;
      }
    } else {
      stats.unknown++;
      if (!stats.examples.unknown) {
        stats.examples.unknown = message;
      }
    }
  }
  return stats;
}

export {
  isUIMessage,
  autoTransformMessage,
  migrateToUIMessage,
  autoTransformMessages,
  migrateMessagesToUIFormat,
  needsMigration,
  analyzeCorruption
};
//# sourceMappingURL=chunk-UJVEAURM.js.map