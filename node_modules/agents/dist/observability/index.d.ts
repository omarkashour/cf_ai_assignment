import { B as BaseEvent, M as MCPObservabilityEvent } from '../mcp-BH1fJeiU.js';

/**
 * Agent-specific observability events
 * These track the lifecycle and operations of an Agent
 */
type AgentObservabilityEvent = BaseEvent<"state:update", {}> | BaseEvent<"rpc", {
    method: string;
    streaming?: boolean;
}> | BaseEvent<"message:request" | "message:response", {}> | BaseEvent<"message:clear"> | BaseEvent<"schedule:create" | "schedule:execute" | "schedule:cancel", {
    callback: string;
    id: string;
}> | BaseEvent<"destroy"> | BaseEvent<"connect", {
    connectionId: string;
}>;

/**
 * Union of all observability event types from different domains
 */
type ObservabilityEvent = AgentObservabilityEvent | MCPObservabilityEvent;
interface Observability {
    /**
     * Emit an event for the Agent's observability implementation to handle.
     * @param event - The event to emit
     * @param ctx - The execution context of the invocation (optional)
     */
    emit(event: ObservabilityEvent, ctx?: DurableObjectState): void;
}
/**
 * A generic observability implementation that logs events to the console.
 */
declare const genericObservability: Observability;

export { type Observability, type ObservabilityEvent, genericObservability };
