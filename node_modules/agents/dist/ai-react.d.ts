import { UseChatOptions, useChat } from "@ai-sdk/react";
import { UIMessage, ChatInit } from "ai";
import { useAgent } from "./react.js";
import "partysocket";
import "partysocket/react";
import "./index.js";
import "cloudflare:workers";
import "@modelcontextprotocol/sdk/client/index.js";
import "@modelcontextprotocol/sdk/types.js";
import "partyserver";
import "./client-DVoPb3-C.js";
import "zod";
import "@modelcontextprotocol/sdk/shared/protocol.js";
import "./mcp-BH1fJeiU.js";
import "@modelcontextprotocol/sdk/client/sse.js";
import "@modelcontextprotocol/sdk/client/streamableHttp.js";
import "./mcp/do-oauth-client-provider.js";
import "@modelcontextprotocol/sdk/client/auth.js";
import "@modelcontextprotocol/sdk/shared/auth.js";
import "./observability/index.js";
import "./ai-types.js";
import "./client.js";
import "./serializable.js";

type AITool<Input = unknown, Output = unknown> = {
  description?: string;
  inputSchema?: unknown;
  execute?: (input: Input) => Output | Promise<Output>;
};
type GetInitialMessagesOptions = {
  agent: string;
  name: string;
  url: string;
};
type UseChatParams<M extends UIMessage = UIMessage> = ChatInit<M> &
  UseChatOptions<M>;
/**
 * Options for the useAgentChat hook
 */
type UseAgentChatOptions<
  State,
  ChatMessage extends UIMessage = UIMessage
> = Omit<UseChatParams<ChatMessage>, "fetch"> & {
  /** Agent connection from useAgent */
  agent: ReturnType<typeof useAgent<State>>;
  getInitialMessages?:
    | undefined
    | null
    | ((options: GetInitialMessagesOptions) => Promise<ChatMessage[]>);
  /** Request credentials */
  credentials?: RequestCredentials;
  /** Request headers */
  headers?: HeadersInit;
  /**
   * @description Whether to automatically resolve tool calls that do not require human interaction.
   * @experimental
   */
  experimental_automaticToolResolution?: boolean;
  /**
   * @description Tools object for automatic detection of confirmation requirements.
   * Tools without execute function will require confirmation.
   */
  tools?: Record<string, AITool<unknown, unknown>>;
  /**
   * @description Manual override for tools requiring confirmation.
   * If not provided, will auto-detect from tools object.
   */
  toolsRequiringConfirmation?: string[];
  /**
   * When true (default), automatically sends the next message only after
   * all pending confirmation-required tool calls have been resolved.
   * @default true
   */
  autoSendAfterAllConfirmationsResolved?: boolean;
};
/**
 * React hook for building AI chat interfaces using an Agent
 * @param options Chat options including the agent connection
 * @returns Chat interface controls and state with added clearHistory method
 */
/**
 * Automatically detects which tools require confirmation based on their configuration.
 * Tools require confirmation if they have no execute function AND are not server-executed.
 * @param tools - Record of tool name to tool definition
 * @returns Array of tool names that require confirmation
 */
declare function detectToolsRequiringConfirmation(
  tools?: Record<string, AITool<unknown, unknown>>
): string[];
declare function useAgentChat<
  State = unknown,
  ChatMessage extends UIMessage = UIMessage
>(
  options: UseAgentChatOptions<State, ChatMessage>
): ReturnType<typeof useChat<ChatMessage>> & {
  clearHistory: () => void;
};

export { type AITool, detectToolsRequiringConfirmation, useAgentChat };
