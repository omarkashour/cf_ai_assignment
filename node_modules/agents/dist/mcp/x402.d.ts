import { ToolCallback, RegisteredTool, McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { ToolAnnotations, CallToolRequest, CallToolResultSchema, CompatibilityCallToolResultSchema, CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import { ZodRawShape } from 'zod';
import { Network, FacilitatorConfig, PaymentRequirements } from 'x402/types';
import { RequestOptions } from '@modelcontextprotocol/sdk/shared/protocol.js';
import { Account } from 'viem';

/**
 * X402 MCP Integration
 *
 * Based on:
 * - Coinbase's x402 (Apache 2.0): https://github.com/coinbase/x402
 * - @ethanniser and his work at https://github.com/ethanniser/x402-mcp
 */

type X402Config = {
    network: Network;
    recipient: `0x${string}`;
    facilitator: FacilitatorConfig;
    version?: number;
};
interface X402AugmentedServer {
    paidTool<Args extends ZodRawShape>(name: string, description: string, priceUSD: number, paramsSchema: Args, annotations: ToolAnnotations, cb: ToolCallback<Args>): RegisteredTool;
}
declare function withX402<T extends McpServer>(server: McpServer, cfg: X402Config): T & X402AugmentedServer;
interface X402AugmentedClient {
    callTool(x402ConfirmationCallback: ((payment: PaymentRequirements[]) => Promise<boolean>) | null, params: CallToolRequest["params"], resultSchema?: typeof CallToolResultSchema | typeof CompatibilityCallToolResultSchema, options?: RequestOptions): Promise<CallToolResult>;
}
type X402ClientConfig = {
    network: Network;
    account: Account;
    maxPaymentValue?: bigint;
    version?: number;
    confirmationCallback?: (payment: PaymentRequirements[]) => Promise<boolean>;
};
declare function withX402Client<T extends Client>(client: T, x402Config: X402ClientConfig): X402AugmentedClient & T;

export { type X402AugmentedClient, type X402AugmentedServer, type X402ClientConfig, type X402Config, withX402, withX402Client };
